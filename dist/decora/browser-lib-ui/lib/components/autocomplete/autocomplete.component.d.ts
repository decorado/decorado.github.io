import { AfterViewInit, EventEmitter } from '@angular/core';
import { FormControl, ControlValueAccessor } from '@angular/forms';
import { DecApiService } from './../../services/api/decora-api.service';
import { Observable } from 'rxjs';
import { LabelFunction, ValueFunction, SelectionEvent, CustomFetchFunction } from './autocomplete.models';
import { MatAutocompleteTrigger } from '@angular/material';
export declare const AUTOCOMPLETE_CONTROL_VALUE_ACCESSOR: any;
export declare class DecAutocompleteComponent implements ControlValueAccessor, AfterViewInit {
    private service;
    autocompleteTrigger: MatAutocompleteTrigger;
    autocompleteInput: FormControl;
    options$: Observable<any[]>;
    writtenValue: any;
    customFetchFunction: CustomFetchFunction;
    endpoint: any;
    disabled: boolean;
    labelFn: LabelFunction;
    labelAttr: string;
    name: string;
    options: any[];
    placeholder: string;
    required: boolean;
    valueFn: ValueFunction;
    valueAttr: string;
    blur: EventEmitter<any>;
    optionSelected: EventEmitter<SelectionEvent>;
    enterButton: EventEmitter<SelectionEvent>;
    termInput: any;
    private _disabled;
    private _options;
    private innerOptions;
    private innerValue;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(service: DecApiService);
    ngAfterViewInit(): void;
    value: any;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onValueChanged(event: any): void;
    writeValue(value: any): void;
    onOptionSelected($event: any): void;
    onEnterButton($event: any): void;
    setFocus(): void;
    openPanel(): void;
    closePanel(): void;
    onBlur($event: any): void;
    clear(reopen?: boolean): void;
    reset(): void;
    extractLabel: LabelFunction;
    private loadRemoteObjectByWrittenValue(writtenValue);
    private detectRequiredData();
    private resetInputControl();
    private extractValue;
    private compareAsString(v1, v2);
    private ensureString(v);
    private setInnerValue(v);
    private setInputValueBasedOnInnerValue(v);
    private getOptionBasedOnValue(v);
    private createInput();
    private subscribeToSearchAndSetOptionsObservable();
    private searchBasedFetchingType(textSearch);
    private searchInLocalOptions(term);
    private raiseError(error);
}
