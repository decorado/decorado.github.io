import { OnDestroy, EventEmitter } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { UserAuthData, LoginData, FacebookLoginData, DecFilter, QueryParams } from './decora-api.model';
import { DecConfigurationService } from './../configuration/configuration.service';
export declare type CallOptions = {
    headers?: HttpHeaders;
    withCredentials?: boolean;
    params?: {
        [prop: string]: any;
    };
    loadingMessage?: string;
} & {
    [prop: string]: any;
};
export declare type HttpRequestTypes = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
export declare class DecApiService implements OnDestroy {
    private http;
    private decConfig;
    user: UserAuthData;
    user$: BehaviorSubject<UserAuthData>;
    loading$: EventEmitter<boolean>;
    private sessionToken;
    private userSubscripion;
    private loadingMap;
    constructor(http: HttpClient, decConfig: DecConfigurationService);
    ngOnDestroy(): void;
    readonly host: any;
    auth: (loginData: LoginData) => Observable<any>;
    authFacebook: (loginData: FacebookLoginData) => Observable<any>;
    logout: (redirectToLoginPage?: boolean) => Observable<any>;
    get: <T>(endpoint: any, search?: DecFilter | QueryParams, options?: CallOptions) => Observable<any>;
    delete: <T>(endpoint: any, options?: CallOptions) => Observable<any>;
    patch: <T>(endpoint: any, payload?: any, options?: CallOptions) => Observable<any>;
    post: <T>(endpoint: any, payload?: any, options?: CallOptions) => Observable<any>;
    put: <T>(endpoint: any, payload?: any, options?: CallOptions) => Observable<any>;
    upsert: <T>(endpoint: any, payload?: any, options?: CallOptions) => Observable<any>;
    upload(endpoint: string, files: File[], options?: CallOptions): Observable<any>;
    handShake(): Promise<any>;
    getResourceUrl(path: any): string;
    private getMethod<T>(url, search?, options?);
    private patchMethod<T>(url, body?, options?);
    private postMethod<T>(url, body?, options?);
    private putMethod<T>(url, body?, options?);
    private deleteMethod<T>(url, options?);
    private requestMethod<T>(type, url, body?, options?);
    private handleError;
    private startLoading;
    private stopLoading;
    private emitLoading;
    private fetchCurrentLoggedUser;
    private transformDecFilterInParams(filter);
    private filterObjectToQueryString(obj);
    private getFilterWithValuesAsArray(filterGroups);
    private createFilesFormData(files);
    private goToLoginPage();
    private getParamsDivider();
    private tryToLoadSignedInUser();
    private newHeaderWithSessionToken(type?, headers?);
    private extratSessionToken(res);
    private subscribeToUser();
    private unsubscribeToUser();
    private shareObservable(call);
}
